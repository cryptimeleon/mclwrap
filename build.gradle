plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
}

group 'org.cryptimeleon'
archivesBaseName = project.name
boolean isRelease = project.hasProperty("release")
version = '3.2.0'  + (isRelease ? "" : "-SNAPSHOT")

sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}


repositories {
    mavenLocal()
    mavenCentral()
}

def mathVersionNoSuffix = '3.+'

dependencies {

    def mathVersion = mathVersionNoSuffix + (isRelease ? "" : "-SNAPSHOT")

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api group: 'org.cryptimeleon', name: 'math', version: mathVersion
    // This dependency is used internally, and not exposed to consumers on their own compile classpath.

    // For tests
    testImplementation(group: 'org.cryptimeleon', name: 'math', version: mathVersion) {
            capabilities {
                requireCapability("org.cryptimeleon:math-tests")
            }
    }
    testCompileOnly(
            'junit:junit:4.12'
    )
    testImplementation(
            'org.junit.jupiter:junit-jupiter-api:5.1.0'
    )
    testRuntimeOnly(
            'org.junit.jupiter:junit-jupiter-engine:5.1.0',
            'org.junit.vintage:junit-vintage-engine:5.1.0'
    )
}

test {
    useJUnitPlatform()
    maxParallelForks = 1
    //we want display the following test events
    testLogging {
        events "PASSED", "STARTED", "FAILED", "SKIPPED"
    }
    afterSuite { desc, result ->
        if (!desc.parent) { // will match the outermost suite
            def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            def startItem = '|  ', endItem = '  |'
            def repeatLength = startItem.length() + output.length() + endItem.length()
            println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
        }
    }
}

task javadocLink(type: Javadoc) {
    source = sourceSets.main.allJava
    classpath = sourceSets.main.runtimeClasspath
    // link to math javadoc
    if (isRelease) {
        options {
            links "https://javadoc.io/doc/org.cryptimeleon/math/" + mathVersionNoSuffix
        }
    }
}


task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadocLink) {
    from javadoc.destinationDir
    archiveClassifier = 'javadoc'
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

java {
    registerFeature("tests") {
        usingSourceSet(sourceSets.test)
    }
    withJavadocJar()
    withSourcesJar()
}


publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            artifacts {
                archives javadocJar, sourcesJar
            }

            pom {
                name = 'mclwrap'
                url = 'https://cryptimeleon.org'
                description = "Mclwrap provides a wrapper around the BN-254 bilinear group implemented in " +
                        "the MCL library. As the bilinear groups implemented in the Cryptimeleon Math library " +
                        "are not particulary efficient, use of this wrapper is recommended for proper benchmarks. " +
                        "Specifically, the Mclwrap implementation's group operations are roughly 100 times " +
                        "as fast as our own implementation."
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'cryptimeleon-dev'
                        name = 'cryptimeleon Developers'
                        email = 'dev@cryptimeleon.org'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/cryptimeleon/mclwrap.git'
                    developerConnection = 'scm:git:https://github.com/cryptimeleon/mclwrap.git'
                    url = 'https://github.com/cryptimeleon/mclwrap/'
                }
            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            username = System.getenv("OSSRH_USERNAME")
            password = System.getenv("OSSRH_TOKEN")
        }
    }
}

signing {
    required(project.hasProperty("release"))
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}
